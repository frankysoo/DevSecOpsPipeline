name: DevSecOps Pipeline
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
env:
  ARTIFACT_NAME: devsecops-demo-app
  ARTIFACT_VERSION: ${{ github.sha }}
  STAGING_ENV: staging
  NODE_VERSION: '18'
jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for SonarCloud analysis
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'  # Cache npm dependencies for faster builds
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            ./node_modules
            ./build
            ./dist
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-
  test:
    name: Run Tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Restore cached build artifacts
        uses: actions/cache@v3
        with:
          path: |
            ./node_modules
            ./build
            ./dist
          key: ${{ runner.os }}-build-${{ github.sha }}
      
      - name: Run tests
        run: npm test
      - name: Upload test results
        if: always()  # Upload test results even on test failure
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test-reports/
          retention-days: 7
  security_scan:
    name: Security Scanning
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Run OWASP Dependency Check (SCA)
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: '${{ env.ARTIFACT_NAME }}'
          path: '.'
          format: 'HTML'
          out: 'reports/dependency-check'
          args: >
            --failOnCVSS 7
            --suppression dependency-check-suppressions.xml
      
      - name: Upload Dependency Check results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: reports/dependency-check/
          retention-days: 7
      
      - name: Set up JDK 17 for SonarCloud
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
      - name: Send notification on security findings
        if: failure()
        run: |
          curl -X POST -H "Content-Type: application/json" \
            --data "{\"text\":\"⚠️ Security scan found critical issues in ${{ env.ARTIFACT_NAME }}. See: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}" \
            ${{ secrets.NOTIFICATION_WEBHOOK }}
  package:
    name: Create and Store Artifact
    needs: [test, security_scan]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ env.ARTIFACT_NAME }}:${{ env.ARTIFACT_VERSION }}
            ghcr.io/${{ github.repository_owner }}/${{ env.ARTIFACT_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_VERSION=${{ env.NODE_VERSION }}
      
      - name: Create artifact info file
        run: |
          echo "ghcr.io/${{ github.repository_owner }}/${{ env.ARTIFACT_NAME }}:${{ env.ARTIFACT_VERSION }}" > artifact_info.txt
      
      - name: Upload artifact info
        uses: actions/upload-artifact@v3
        with:
          name: artifact-info
          path: artifact_info.txt
  deploy_staging:
    name: Deploy to Staging
    needs: package
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download artifact info
        uses: actions/download-artifact@v3
        with:
          name: artifact-info
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}
      
      - name: Disable strict host key checking
        run: |
          mkdir -p ~/.ssh
          echo "StrictHostKeyChecking no" >> ~/.ssh/config
      
      - name: Deploy to staging
        env:
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
          STAGING_USER: ${{ secrets.STAGING_USER }}
          PORT_NUMBER: "5001" # Changed port
        run: |
          ARTIFACT_FULL=$(cat artifact_info.txt)
          chmod +x ./scripts/deploy.sh
          ./scripts/deploy.sh "$ARTIFACT_FULL" "${{ env.STAGING_ENV }}" "${{ env.STAGING_HOST }}" "${{ env.STAGING_USER }}" "$PORT_NUMBER"
      
      - name: Send deployment notification
        run: |
          curl -X POST -H "Content-Type: application/json" \
            --data "{\"text\":\"✅ ${{ env.ARTIFACT_NAME }} version ${{ env.ARTIFACT_VERSION }} has been deployed to staging environment. See: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"}" \
            ${{ secrets.NOTIFICATION_WEBHOOK }}
