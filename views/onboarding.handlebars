<!-- Custom onboarding styles -->
<link rel="stylesheet" href="/css/onboarding.css">
<div class="onboarding-layout">
  <div class="onboarding-hero">
    <div class="container">
      <h1>Integrate Your Application</h1>
      <p>Configure a complete DevSecOps pipeline for your Node.js application with automated building, testing, security scanning, and deployment</p>
    </div>
  </div>
  <div class="container">
    <!-- Main onboarding card -->
    <div class="onboarding-card">
      <div class="onboarding-card-header">
        <i class="fas fa-rocket"></i> Project Onboarding Wizard
      </div>
      
      <div class="onboarding-card-body">
        <!-- Important note about manually applying the configuration -->
        <div class="guidance-alert warning">
          <h4><i class="fas fa-exclamation-triangle"></i> Important Note</h4>
          <p>This wizard will generate configuration files and instructions that <strong>you will need to manually apply</strong> to your GitHub repository. The system will not automatically update your repository or set up secrets for you.</p>
        </div>
      
        <!-- Stepper navigation -->
        <div class="stepper">
          <div class="step active" data-step="1">
            <div class="step-number">1</div>
            <div class="step-title">Project Info</div>
            <div class="step-subtitle">Repository details</div>
          </div>
          <div class="step" data-step="2">
            <div class="step-number">2</div>
            <div class="step-title">Build Config</div>
            <div class="step-subtitle">Build settings</div>
          </div>
          <div class="step" data-step="3">
            <div class="step-number">3</div>
            <div class="step-title">Deployment</div>
            <div class="step-subtitle">Server setup</div>
          </div>
          <div class="step" data-step="4">
            <div class="step-number">4</div>
            <div class="step-title">Security</div>
            <div class="step-subtitle">Scanning options</div>
          </div>
          <div class="step" data-step="5">
            <div class="step-number">5</div>
            <div class="step-title">Secrets</div>
            <div class="step-subtitle">Auth credentials</div>
          </div>
        </div>
        
        <!-- Onboarding form -->
        <div class="onboarding-form-container">
          <form id="onboarding-form" action="/onboarding" method="POST">
            
            <!-- Step 1: Basic Information -->
            <div class="form-step active" data-step="1">
              <div class="form-section">
                <h3><i class="fas fa-info-circle"></i> Project Information</h3>
                <p class="form-section-description">Enter the details about your GitHub repository where you want to set up the DevSecOps pipeline.</p>
                
                <div class="form-group">
                  <label for="project_name">Project Name <span class="required">*</span></label>
                  <input type="text" id="project_name" name="project_name" class="form-control" required
                        placeholder="my-nodejs-app">
                  <small class="form-text">A unique name for your project (used in the Docker image and deployment)</small>
                </div>
                <div class="form-group">
                  <label for="repository_url">GitHub Repository URL <span class="required">*</span></label>
                  <input type="text" id="repository_url" name="repository_url" class="form-control" required
                        placeholder="https://github.com/username/repo-name">
                  <small class="form-text">The full URL to your GitHub repository</small>
                </div>
                <div class="form-group">
                  <label for="main_branch">Main Branch</label>
                  <input type="text" id="main_branch" name="main_branch" class="form-control"
                        placeholder="main" value="main">
                  <small class="form-text">The primary branch that will trigger the pipeline when code is pushed</small>
                </div>
              </div>
              
              <div class="guidance-alert info">
                <h4><i class="fas fa-info-circle"></i> Project Requirements</h4>
                <p>Your project should have a Node.js application with a package.json file. The pipeline will use npm to install dependencies and run build commands.</p>
              </div>
              
              <div class="step-buttons">
                <div></div> <!-- Empty div for flex spacing -->
                <button type="button" class="btn btn-primary next-step">
                  Continue <i class="fas fa-arrow-right"></i>
                </button>
              </div>
            </div>
            
            <!-- Step 2: Build Configuration -->
            <div class="form-step" data-step="2">
              <div class="form-section">
                <h3><i class="fas fa-hammer"></i> Build Configuration</h3>
                <p class="form-section-description">Specify how your application should be built and tested in the pipeline.</p>
                
                <div class="form-row">
                  <div class="form-col">
                    <div class="form-group">
                      <label for="node_version">Node.js Version</label>
                      <select id="node_version" name="node_version" class="form-control form-select">
                        <option value="16.20.2">Node.js 16.20.2 (LTS)</option>
                        <option value="18.17.1" selected>Node.js 18.17.1 (LTS)</option>
                        <option value="20.5.1">Node.js 20.5.1 (LTS)</option>
                      </select>
                      <small class="form-text">Version used for building and testing</small>
                    </div>
                  </div>
                  
                  <div class="form-col">
                    <div class="form-group">
                      <label for="port_number">Application Port</label>
                      <input type="number" id="port_number" name="port_number" class="form-control"
                            placeholder="5000" value="5000" min="1" max="65535">
                      <small class="form-text">Port your Node.js app listens on</small>
                    </div>
                  </div>
                </div>
                <div class="form-group">
                  <label for="docker_file_path">Dockerfile Path</label>
                  <input type="text" id="docker_file_path" name="docker_file_path" class="form-control"
                        placeholder="Dockerfile" value="Dockerfile">
                  <small class="form-text">Path to your Dockerfile relative to repository root. Make sure this file exists in your repo.</small>
                </div>
                <div class="form-group">
                  <label for="build_command">Build Command</label>
                  <input type="text" id="build_command" name="build_command" class="form-control"
                        placeholder="npm run build" value="npm run build">
                  <small class="form-text">The command to build your application (must be defined in your package.json scripts)</small>
                </div>
                <div class="form-group">
                  <label for="test_command">Test Command</label>
                  <input type="text" id="test_command" name="test_command" class="form-control"
                        placeholder="npm test" value="npm test">
                  <small class="form-text">The command to run your tests (must be defined in your package.json scripts)</small>
                </div>
              </div>
              
              <div class="guidance-alert info">
                <h4><i class="fas fa-info-circle"></i> About Docker Packaging</h4>
                <p>The pipeline will build a Docker image from your application. Ensure your repository has a valid Dockerfile at the specified path that implements security best practices:</p>
                <ul>
                  <li>Use a specific Node.js version (like 18.17.1-alpine3.18)</li>
                  <li>Run your application as a non-root user</li>
                  <li>Implement a health check in your Dockerfile</li>
                </ul>
              </div>
              
              <div class="step-buttons">
                <button type="button" class="btn btn-outline prev-step">
                  <i class="fas fa-arrow-left"></i> Back
                </button>
                <button type="button" class="btn btn-primary next-step">
                  Continue <i class="fas fa-arrow-right"></i>
                </button>
              </div>
            </div>
            
            <!-- Step 3: Deployment Configuration -->
            <div class="form-step" data-step="3">
              <div class="form-section">
                <h3><i class="fas fa-server"></i> Deployment Configuration</h3>
                <p class="form-section-description">Provide information about your staging server where the application will be deployed.</p>
                
                <div class="form-group">
                  <label for="staging_server_address">Staging Server Address <span class="required">*</span></label>
                  <input type="text" id="staging_server_address" name="staging_server_address" class="form-control" required
                        placeholder="staging.example.com or 192.168.1.100">
                  <small class="form-text">The hostname or IP address of your staging server (must be accessible via SSH)</small>
                </div>
              </div>
              
              <div class="guidance-alert important">
                <h4><i class="fas fa-exclamation-circle"></i> Server Requirements</h4>
                <p>Your staging server must have:</p>
                <ul>
                  <li>Docker installed and running</li>
                  <li>SSH access configured for the user specified in your GitHub secrets</li>
                  <li>Port access for your application (default: 5000)</li>
                  <li>The user must be part of the 'docker' group: <code>sudo usermod -aG docker $USER</code></li>
                </ul>
              </div>
              
              <div class="step-buttons">
                <button type="button" class="btn btn-outline prev-step">
                  <i class="fas fa-arrow-left"></i> Back
                </button>
                <button type="button" class="btn btn-primary next-step">
                  Continue <i class="fas fa-arrow-right"></i>
                </button>
              </div>
            </div>
            
            <!-- Step 4: Security Scanning Configuration -->
            <div class="form-step" data-step="4">
              <div class="form-section">
                <h3><i class="fas fa-shield-alt"></i> Security Scanning Configuration</h3>
                <p class="form-section-description">Configure security scanning tools that will analyze your code for vulnerabilities.</p>
                
                <div class="form-group">
                  <label for="sonar_project_key">SonarCloud Project Key</label>
                  <input type="text" id="sonar_project_key" name="sonar_project_key" class="form-control"
                        placeholder="my-org_my-project">
                  <small class="form-text">Your SonarCloud project key (format: organization_projectname). If left empty, a default will be generated.</small>
                </div>
                <div class="form-group">
                  <label for="sonar_organization">SonarCloud Organization</label>
                  <input type="text" id="sonar_organization" name="sonar_organization" class="form-control"
                        placeholder="my-organization">
                  <small class="form-text">Your SonarCloud organization name. If left empty, a default will be used.</small>
                </div>
                
                <div class="form-group">
                  <label for="notification_endpoint">Notification Webhook URL</label>
                  <input type="text" id="notification_endpoint" name="notification_endpoint" class="form-control"
                        placeholder="https://hooks.slack.com/services/XXX/YYY/ZZZ">
                  <small class="form-text">Webhook URL for receiving pipeline notifications (Slack, Teams, etc.)</small>
                </div>
              </div>
              
              <div class="guidance-alert info">
                <h4><i class="fas fa-info-circle"></i> About Security Scanning</h4>
                <p>The pipeline will perform two types of security scans:</p>
                <ul>
                  <li><strong>Software Composition Analysis (SCA)</strong> - Scans your dependencies for known vulnerabilities using OWASP Dependency Check</li>
                  <li><strong>Static Application Security Testing (SAST)</strong> - Analyzes your code for potential security issues using SonarCloud</li>
                </ul>
                <p>You'll need to create a SonarCloud account and obtain a token for the SONAR_TOKEN secret. The pipeline also includes a dependency-check-suppressions.xml file for managing false positives.</p>
              </div>
              
              <div class="step-buttons">
                <button type="button" class="btn btn-outline prev-step">
                  <i class="fas fa-arrow-left"></i> Back
                </button>
                <button type="button" class="btn btn-primary next-step">
                  Continue <i class="fas fa-arrow-right"></i>
                </button>
              </div>
            </div>
            
            <!-- Step 5: Required Secrets -->
            <div class="form-step" data-step="5">
              <div class="form-section">
                <h3><i class="fas fa-key"></i> Required GitHub Secrets</h3>
                <p class="form-section-description">These secrets will need to be added to your GitHub repository as repository secrets.</p>
                
                <div class="manual-action-callout">
                  <h4><i class="fas fa-exclamation-triangle"></i> Manual GitHub Setup Required</h4>
                  <p>After generating the pipeline configuration, you must manually add these secrets to your GitHub repository:</p>
                  <p><strong>Go to your GitHub repository → Settings → Secrets and variables → Actions → New repository secret</strong></p>
                </div>
                
                <div class="secrets-list">
                  <div class="secret-item">
                    <div class="secret-name">SONAR_TOKEN</div>
                    <div class="secret-description">Authentication token for SonarCloud (obtain from SonarCloud account settings)</div>
                  </div>
                  <div class="secret-item">
                    <div class="secret-name">STAGING_SSH_KEY</div>
                    <div class="secret-description">SSH private key for accessing your staging server (the entire content of your private key file, including BEGIN/END markers)</div>
                  </div>
                  <div class="secret-item">
                    <div class="secret-name">STAGING_USER</div>
                    <div class="secret-description">Username for SSH access to your staging server (must have Docker permissions)</div>
                  </div>
                  <div class="secret-item">
                    <div class="secret-name">STAGING_HOST</div>
                    <div class="secret-description">Hostname or IP address of your staging server (same as entered in the Deployment step)</div>
                  </div>
                  <div class="secret-item">
                    <div class="secret-name">NOTIFICATION_WEBHOOK</div>
                    <div class="secret-description">Webhook URL for sending notifications (same as the one entered in the previous step)</div>
                  </div>
                </div>
                <div id="additional-secrets">
                  <!-- Additional secret fields will be added here -->
                </div>
                <button type="button" id="add-secret" class="btn btn-outline">
                  <i class="fas fa-plus"></i> Add Custom Secret
                </button>
              </div>
              
              <div class="guidance-alert warning">
                <h4><i class="fas fa-lock"></i> Security Note</h4>
                <p>Never commit secrets or credentials directly in your code or configuration files. Always use GitHub secrets for sensitive information.</p>
              </div>
              
              <div class="step-buttons">
                <button type="button" class="btn btn-outline prev-step">
                  <i class="fas fa-arrow-left"></i> Back
                </button>
                <button type="submit" class="btn btn-success">
                  <i class="fas fa-rocket"></i> Generate Pipeline Configuration
                </button>
              </div>
            </div>
            
          </form>
        </div>
        
        <!-- Generated Configuration (hidden initially) -->
        <div class="generated-config">
          <div class="success-container">
            <div class="success-icon">
              <i class="fas fa-check"></i>
            </div>
            <h2 class="success-title">Configuration Generated!</h2>
            <p class="success-text">Your DevSecOps pipeline configuration has been generated successfully. You must now manually apply these configurations to your GitHub repository following the steps below.</p>
          </div>
          
          <div class="manual-action-callout">
            <h4><i class="fas fa-exclamation-triangle"></i> Manual Setup Required</h4>
            <p>This tool has generated configuration files for your DevSecOps pipeline, but <strong>you must manually add them to your GitHub repository</strong>. We cannot automatically update your repository.</p>
          </div>
          
          <div class="config-card">
            <div class="config-card-header">
              <i class="fas fa-code"></i> GitHub Actions Workflow File
            </div>
            <div class="config-card-body">
              <p>Create a directory at <code>.github/workflows</code> in your repository and add this file as <code>devsecops-pipeline.yml</code>:</p>
              <div class="code-block" id="workflow-yaml">
                <!-- Generated workflow YAML will be inserted here -->
              </div>
              
              <button id="copy-workflow-yaml" class="copy-btn">
                <i class="fas fa-copy"></i> Copy Workflow Configuration
              </button>
            </div>
          </div>
          
          <div class="config-card">
            <div class="config-card-header">
              <i class="fas fa-file-code"></i> Dependency Check Suppressions File
            </div>
            <div class="config-card-body">
              <p>Add this file to the root of your repository as <code>dependency-check-suppressions.xml</code>:</p>
              <div class="code-block" id="dependency-suppressions">
<?xml version="1.0" encoding="UTF-8"?>
<suppressions xmlns="https://jeremylong.github.io/DependencyCheck/dependency-suppression.1.3.xsd">
    <!-- Example suppression. Replace or add your own as needed. -->
    <!--
    <suppress>
        <notes>Suppression for false positive or known issue that cannot be fixed</notes>
        <packageUrl regex="true">^pkg:npm/example\-package@.*$</packageUrl>
        <cve>CVE-YYYY-XXXX</cve>
    </suppress>
    -->
</suppressions>
              </div>
              
              <button id="copy-dependency-suppressions" class="copy-btn">
                <i class="fas fa-copy"></i> Copy Suppressions File
              </button>
            </div>
          </div>
          
          <div class="config-card">
            <div class="config-card-header">
              <i class="fas fa-cogs"></i> SonarCloud Configuration
            </div>
            <div class="config-card-body">
              <p>Add this file to the root of your repository as <code>sonar-project.properties</code>:</p>
              <div class="code-block" id="sonar-config">
                <!-- Generated SonarCloud config will be inserted here -->
              </div>
              
              <button id="copy-sonar-config" class="copy-btn">
                <i class="fas fa-copy"></i> Copy SonarCloud Configuration
              </button>
            </div>
          </div>
          
          <div class="config-card">
            <div class="config-card-header">
              <i class="fas fa-tasks"></i> Required Manual Steps
            </div>
            <div class="config-card-body">
              <p>Follow these steps carefully to set up your pipeline:</p>
              
              <ol class="next-steps">
                <li>
                  <strong>Create the GitHub Actions workflow file</strong>
                  <p>In your repository, create the directory structure <code>.github/workflows</code> and add the file <code>devsecops-pipeline.yml</code> with the content copied above.</p>
                </li>
                <li>
                  <strong>Add the dependency check suppressions file</strong>
                  <p>In your repository root, create the file <code>dependency-check-suppressions.xml</code> with the content copied above.</p>
                </li>
                <li>
                  <strong>Add the SonarCloud configuration file</strong>
                  <p>In your repository root, create the file <code>sonar-project.properties</code> with the content copied above.</p>
                </li>
                <li>
                  <strong>Add the required secrets to GitHub</strong>
                  <p>Go to your GitHub repository → Settings → Secrets and variables → Actions → New repository secret</p>
                  <ul class="secrets-checklist" id="secrets-checklist">
                    <!-- Secret items will be inserted here -->
                  </ul>
                </li>
                <li>
                  <strong>Ensure your repository has a valid Dockerfile</strong>
                  <p>Verify that your repository contains a proper Dockerfile at the path you specified, implementing the security best practices mentioned above.</p>
                </li>
                <li>
                  <strong>Commit and push all changes to your main branch</strong>
                  <p>The pipeline will be triggered automatically when you push to your main branch.</p>
                </li>
                <li>
                  <strong>Monitor the pipeline execution</strong>
                  <p>Go to the Actions tab of your GitHub repository to monitor the pipeline execution.</p>
                </li>
              </ol>
              
              <div style="margin-top: 2rem; text-align: center;">
                <a href="/dashboard" class="btn btn-primary">
                  <i class="fas fa-tachometer-alt"></i> View Dashboard
                </a>
                <a href="/onboarding" class="btn btn-outline" style="margin-left: 1rem;">
                  <i class="fas fa-redo"></i> Configure Another Project
                </a>
              </div>
            </div>
          </div>
        </div>
        
      </div>
    </div>
  </div>
</div>
<!-- Include onboarding JavaScript -->
<script src="/js/onboarding.js"></script>
